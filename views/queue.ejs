<%-include("head")%>
<body>
    <%-include("sidebar")%>
    <%-include("main-content-top")%>
    <form>
        <div id="for-alert" style="height:98vh; width:79vw; position: absolute; z-index:2"></div>
        <a id="queue_count" style="font-size:2vw; font-weight:bold;">จำนวนคิวและนัดทั้งหมดของโรงพยาบาลในวันนี้: -</a><br><br>
        <div class="form-group row">
            <label for="date_input" class="col-sm-2 col-form-label">วันที่ต้องการจองคิว : </label>
            <div class="col-sm-5">
                <input name="date_input" class="form-control" id="date_input" type="date" onchange="changeDate()"><br>
            </div>
        </div>
        <div class="form-group row">
            <label for="doctor_selected" class="col-sm-2 col-form-label">หมอ : </label>
            <div class="col-sm-5">
                <input name="doctor_selected" class="form-control" list="doctors_data" id="doctor_selected" type="text" oninput="doctors_filter();updateTasksAndServices();canService();updateDuration();updateAllPrice();updateClockData();"><br>
            </div>
        </div>
        <datalist id="doctors_data"></datalist>
        <div id="clock-time" style="width:30%; aspect-ratio: 1; margin-bottom:3vw; justify-content:center; display: flexbox; align-items: center;">
            <canvas id="clocktext" width="400" height="400" style="position:absolute; width:30%; aspect-ratio:1;"></canvas>
        </div>
        <br><br>
        <div id="queue-below-container">
                <div class="form-group row">
                    <label for="start_time_input" class="col-sm-2 col-form-label">เวลาที่ต้องการจองคิว :</label>
                    <div class="col-sm-5">
                        <input name="start_time_input" class="form-control" id="start_time_input" type="time" oninput="updateDuration();updateClockData();">
                    </div>
                </div>
                <div class="form-group row">
                    <label from="end_time_input" class="col-sm-2 col-form-label">ถึง : </label>
                    <div class="col-sm-5">
                        <input name="end_time_input" class="end_time_input" id="end_time_input" type="time" disabled><br>
                    </div>
                </div>
            
            <div id="services_container">
                <!-- Service Select Appear Here! -->
            </div><br>
            <button type="button" class="btn btn-primary" id="add_service_button" onclick="addService();">+</button>
            <br>
            <div class="form-group row">
                <label for="all-price-count" class="col-sm-2 col-form-label">ราคารวมบริการทั้งหมด : </label>
                <div class="col-sm-5">
                    <input class="form-control" name="all-price-count" type="text" id="all-price-count" placeholder="0 บาท" disabled>
                </div>
            </div>
            
            <br><br><br>
            <button class="btn btn-success" type="button" id="queue_button" onclick="queue()">จองคิว</button>
            <a href="/"><button class="btn btn-danger" type="button" id="cancel_button">ยกเลิก</button></a>
        </div>
    </form>
    <%-include("main-content-bottom")%>
    <%-include("script-toggle-sidebar")%>
    <script>
        document.getElementById("logo").removeAttribute("src");
        document.getElementById("logo").setAttribute("src", "../logo.png");
        <%-include('scripts/RadianFormat')%>
        <%-include('scripts/DateFormat')%>

        let can_queue = true;

        document.getElementById("for-alert").style.visibility = "hidden";

        document.getElementById("date_input").value = DateToDateString(new Date("<%=search_date%>"));

        function changeDate() {
            window.location.href = `/queue/${document.getElementById("date_input").value}`;
        }

        let radianList = [];
        let current_tasks_list = [];

        let services_data_sorted = [];

        let services_count = 0;

        const services_container = document.getElementById("services_container");
        const services_div_list = services_container.children;

        const services_data = <%- JSON.stringify(services_data) %>;
        const doctors_data = <%- JSON.stringify(doctors_data) %>;
        const tasks_data = <%- JSON.stringify(tasks_data) %>;
        const subtasks_data = <%- JSON.stringify(subtasks_data) %>;
        const service_perms_data = <%- JSON.stringify(service_perms_data) %>;
        const patient_data = <%- JSON.stringify(patient_data) %>;
        
        // services_data
        services_data.forEach(service => {
            const perms_list = service_perms_data.filter(perms => perms.service_id == service.service_id);

            service.doctor_id = [];
            service.specialty_id = [];
            perms_list.forEach(perms => {
                service.doctor_id.push(perms.doctor_id);
                service.specialty_id.push(perms.specialty_id);
            })
            
        });

        function updateTasksAndServices() {
            const doctor_selected = document.getElementById("doctor_selected").value;
            const doctor_selectedOption = [...document.getElementById("doctors_data").options]
                .find(option => option.value === doctor_selected);
            
            current_tasks_list = [];
            services_data_sorted = [];

            let selectedDoctorId;
            let selectedSpecialtyId;

            if (doctor_selectedOption) {
                selectedDoctorId = doctor_selectedOption.dataset.id;
                selectedSpecialtyId = doctor_selectedOption.dataset.specialty_id;
            } else {
                selectedDoctorId = -1;
                selectedSpecialtyId = -1;
            }

            subtasks_data.forEach(item => {
                if (item.doctor_id == selectedDoctorId || item.patient_id == patient_data) {
                    current_tasks_list.push(item);
                }
            });
            services_data.forEach(item => {
                if (item.specialty_id == selectedSpecialtyId || item.doctor_id == selectedDoctorId) {
                    services_data_sorted.push(item);
                }
            });
            
            Array.from(services_div_list).forEach(function(item) {
                services_filter(item.id);
            });
        }
        updateTasksAndServices();

        // Creating clock and number
        const canvasClockText = document.getElementById('clocktext');
        const contextClockText = canvasClockText.getContext('2d');
        const centerX = canvasClockText.width / 2;
        const centerY = canvasClockText.height / 2;
        const radius = 180;


        function createClockNumber() {
            const number_clock = [
                { value: degreesToRadians(0),      number: '15' },
                { value: degreesToRadians(30),     number: '16' },
                { value: degreesToRadians(60),     number: '17' },
                { value: degreesToRadians(90),     number: '18' },
                { value: degreesToRadians(120),    number: '19' },
                { value: degreesToRadians(150),    number: '20' },
                { value: degreesToRadians(180),    number: '9' },
                { value: degreesToRadians(210),    number: '10' },
                { value: degreesToRadians(240),    number: '11' },
                { value: degreesToRadians(270),    number: '12' },
                { value: degreesToRadians(300),    number: '13' },
                { value: degreesToRadians(330),    number: '14' }
            ];

            number_clock.forEach(item => {
                const textX = centerX + (radius) * Math.cos(item.value);
                const textY = centerY + (radius) * Math.sin(item.value);
                
                contextClockText.fillStyle = 'black';
                contextClockText.font = '20px Arial';
                contextClockText.fillText(item.number, textX - 10, textY + 8);
            });
        }


        function updateClockData() {
            contextClockText.clearRect(0, 0, canvasClockText.width, canvasClockText.height);
            createClockNumber();

            const timeList = [];
            radianList = [];

            // Already Tasks Queue / Appointment
            current_tasks_list.forEach(item => {
                timeList.push({start: new Date(item.start_datetime),
                    end: new Date(item.end_datetime),
                    status: "task"});
            });

            // User Selected Queue (If you can queue)
            if (can_queue) {
                const temToday = DateToDateString(getCurrentTHDatetime());
                timeList.push({start: new Date(temToday + " " + document.getElementById("start_time_input").value + ":00"),
                        end: new Date(temToday + " " + document.getElementById("end_time_input").value + ":00"),
                        status: "selected"});
            }

            contextClockText.beginPath();
            contextClockText.moveTo(centerX, centerY);
            
            timeList.forEach(item => {
                radianList.push({start: degreesToRadians(180+((item.start.getHours()-9)*30)+(item.start.getMinutes()*0.5)),
                                end: degreesToRadians(180+((item.end.getHours()-9)*30)+(item.end.getMinutes()*0.5)),
                                status: item.status});
            });
            
            drawClock();
        }

        function drawClock() {
            // Disable Queue (Clinic Closed)
            contextClockText.beginPath();
            contextClockText.moveTo(centerX, centerY);
            contextClockText.arc(centerX, centerY, radius-15, degreesToRadians(150), degreesToRadians(180)); // Clinic Closed
            contextClockText.closePath();

            contextClockText.fillStyle = 'gray';
            contextClockText.fill();

            // Disable Queue (Break Time)
            contextClockText.beginPath();
            contextClockText.moveTo(centerX, centerY);
            contextClockText.arc(centerX, centerY, radius-15, degreesToRadians(270), degreesToRadians(300)); // Break Time
            contextClockText.closePath();

            contextClockText.fillStyle = 'gray';
            contextClockText.fill();

            // Already Tasks Queue / Appointment   &   User Selected Queue
            radianList.forEach(item => {
                contextClockText.beginPath();
                contextClockText.moveTo(centerX, centerY);
                contextClockText.arc(centerX, centerY, (item.status == "task") ? radius-15 : radius-30, item.start, item.end);
                contextClockText.closePath();

                contextClockText.fillStyle = item.status == "task" ? "red" : "green";
                contextClockText.fill();
            });
        }
        updateClockData();

        

        function services_filter(id) {
            if (!can_queue) return;
            const temDiv = document.getElementById(id);
            const tem_services_datalist = temDiv.querySelector("#services_data");

            tem_services_datalist.innerHTML = "";
            services_data_sorted.forEach(function(item) {
                let temOption = document.createElement("option");
                temOption.dataset.id = item.service_id;
                temOption.dataset.duration = item.duration;
                temOption.dataset.price = item.price;
                temOption.innerHTML = item.price.toLocaleString() + " บาท";
                temOption.value = item.name;
                
                tem_services_datalist.appendChild(temOption);
            });
        }

        function doctors_filter() {
            const doctors_datalist = document.getElementById("doctors_data");

            doctors_datalist.innerHTML = "";
            doctors_data.forEach(function(item) {
                let temOption = document.createElement("option");
                temOption.dataset.id = item.doctor_id;
                temOption.dataset.specialty_id = item.specialty_id;
                temOption.innerHTML = item.specialty;
                temOption.value = item.prename + " " + item.firstname + " " + item.lastname;
                
                doctors_datalist.appendChild(temOption);
            });
        }
        doctors_filter();

        function addService() {
            if (!can_queue) return;
            services_count += 1;
            const temDiv = document.createElement("div");
            temDiv.innerHTML = `<a>บริการ: </a><input list="services_data" class="service_selected" type="text" placeholder="โปรดเลือกหมอข้างบน" onchange="services_filter(${services_count});updateServiceData(${services_count});updateDuration();updateAllPrice();updateClockData();" disabled>\
                                <datalist id="services_data"></datalist>\
                                <a>ระยะเวลาบริการ : </a><input class="duration_input" type="number" placeholder="ไม่พบข้อมูลบริการ" disabled>\
                                <a>ราคาบริการ : </a><input class="price_input" type="number" placeholder="ไม่พบข้อมูลบริการ" disabled>` +
                                (services_count != 1 ? `<button onclick="removeService(${services_count});updateDuration();updateAllPrice();updateClockData();">-</button>` : ``);
            temDiv.id = services_count;

            services_container.appendChild(temDiv);
            
            services_filter(services_count);
            canServiceID(services_count);
        }
        addService();

        function updateServiceData(id) {
            if (!can_queue) return;
            const temDiv = document.getElementById(id);

            const service_selected = temDiv.querySelector(".service_selected").value;
            const service_selectedOption = [...temDiv.querySelector("#services_data").options]
                .find(option => option.value === service_selected);
            
            if (service_selectedOption) {
                const temPrice = service_selectedOption.dataset.price.toLocaleString() + " บาท";
                const temDuration = service_selectedOption.dataset.duration;
                const temDurationString = ((temDuration >= 60) ? ( Math.floor( temDuration / 60) ) + " ชั่วโมง " : "") + 
                                    ( Math.floor( temDuration % 60) ) + " นาที";
                temDiv.querySelector(".duration_input").placeholder = temDurationString;
                temDiv.querySelector(".price_input").placeholder = temPrice;
            } else {
                temDiv.querySelector(".duration_input").placeholder = "ไม่พบข้อมูลบริการ";
                temDiv.querySelector(".price_input").placeholder = "ไม่พบข้อมูลบริการ";
            }
        }

        function removeService(id) {
            if (!can_queue) return;
            const temDiv = document.getElementById(id);
            services_container.removeChild(temDiv);
        }

        function findQueueCount() {
            document.getElementById("queue_count").innerHTML = "จำนวนคิวและนัดทั้งหมดของโรงพยาบาลในวันนี้: " + <%= tasks_data.length %>;
        }
        findQueueCount();

        function queue() {
            const subtasksList = [];
            
            Array.from(services_div_list).forEach(function(item) {
                const service_selected = item.querySelector(".service_selected").value;
                const service_selectedOption = [...item.querySelector("#services_data").options]
                    .find(option => option.value === service_selected);
                
                if (service_selectedOption) {
                    subtasksList.push(service_selectedOption.dataset.id);
                }
            });

            const doctor_selectedOption = [...document.getElementById("doctors_data").options]
                .find(option => option.value === document.getElementById("doctor_selected").value);

            let doctor_id_input;
            if (doctor_selectedOption) {
                doctor_id_input = doctor_selectedOption.dataset.id;
            }

            let queueData = {
                    date: document.getElementById("date_input").value,
                    doctor_id: doctor_id_input,
                    start_time: document.getElementById("start_time_input").value,
                    subtasks: subtasksList
            };

            fetch('/queue-insert', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(queueData)
            })
            .then(response => response.text())
            .then(data => {
                document.getElementById("for-alert").innerHTML = data;
                document.getElementById("for-alert").style.visibility = "visible";
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        }

        // Update Duration
        function updateDuration() {
            if (!can_queue) return;
            let destTime = new Date(`<%-JSON.stringify(search_date)%>` + document.getElementById("start_time_input").value + ":00");

            if (isNaN(destTime.getTime())) return; 

            Array.from(services_div_list).forEach(function(item) {
                if (item.querySelector(".duration_input").placeholder.split(" ")[1] === "ชั่วโมง") {
                    destTime.setMinutes(destTime.getMinutes() + 60*parseInt(item.querySelector(".duration_input").placeholder.split(" ")[0])
                                        + parseInt(item.querySelector(".duration_input").placeholder.split(" ")[2]));
                } else if (item.querySelector(".duration_input").placeholder.split(" ")[1] === "นาที") {
                    destTime.setMinutes(destTime.getMinutes() + parseInt(item.querySelector(".duration_input").placeholder.split(" ")[0]));
                } else {
                    document.getElementById("end_time_input").value = "";
                }
            });

            document.getElementById("end_time_input").value = DateToTimeString(destTime);
            
        }

        // Update All Price Count
        function updateAllPrice() {
            if (!can_queue) return;
            let allprice = 0;

            Array.from(services_div_list).forEach(function(item) {
                if (item.querySelector(".price_input").placeholder.split(" ")[1] === "บาท") {
                    allprice += parseInt(item.querySelector(".price_input").placeholder.split(" ")[0]);
                }
            });
            document.getElementById("all-price-count").placeholder = allprice + " บาท";
        }

        // Check Can Service?
        function canService() {
            if (services_data_sorted.length == 0) {
                Array.from(services_div_list).forEach(function(item) {
                    item.querySelector(".service_selected").placeholder = "โปรดเลือกหมอข้างบน";
                    item.querySelector(".service_selected").value = "";
                    item.querySelector(".service_selected").disabled = true;

                    updateServiceData(item.id);
                });
            } else {
                Array.from(services_div_list).forEach(function(item) {
                    item.querySelector(".service_selected").placeholder = "ชื่อบริการ...";
                    item.querySelector(".service_selected").disabled = false;

                    updateServiceData(item.id);
                });
            }
        }

        function canServiceID(id) {
            const temDiv = document.getElementById(id);

            if (services_data_sorted.length == 0) {
                temDiv.querySelector(".service_selected").placeholder = "โปรดเลือกหมอข้างบน";
                temDiv.querySelector(".service_selected").value = "";
                temDiv.querySelector(".service_selected").disabled = true;

                updateServiceData(id);
            } else {
                temDiv.querySelector(".service_selected").placeholder = "ชื่อบริการ...";
                temDiv.querySelector(".service_selected").disabled = false;

                updateServiceData(id);
            }
        }
        
        // Check Can Queue On This Date?
        if (new Date(`<%=search_date%> 07:00:00`).getTime() < new Date(DateToDateString(new Date())).getTime()) {
            document.getElementById("queue-below-container").innerHTML = "ไม่สามารถจองคิวในวันที่ผ่านมาแล้วได้";
            can_queue = false;
        } else {
            can_queue = true;
        }
    </script>
</body>

</html>
