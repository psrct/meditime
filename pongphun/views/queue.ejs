<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meditime Queue</title>
</head>
<body>
    <div id="for-alert" style="height:98vh; width:98vw; position: absolute;"></div>
    <a id="queue_count" style="font-size:2vw; font-weight:bold;">จำนวนคิวและนัดในวันนี้: -</a><br>
    <a>วันที่ต้องการจองคิว : </a><input id="date_input" type="date" onchange="changeDate()"><br>
    <a>หมอ : </a><input list="doctors_data" id="doctor_selected" type="text" onchange="doctors_filter();updateTasksAndServices();updateClockData();updateDuration();updateAllPrice();"><br>
    <datalist id="doctors_data"></datalist>
    <div id="clock-time" style="width:30%; aspect-ratio: 1; margin-bottom:3vw; justify-content:center; display: flexbox; align-items: center;">
        <canvas id="clocktext" width="400" height="400" style="position:absolute; width:30%; aspect-ratio:1;"></canvas>
    </div>
    <div id="queue-below-container">
        <a>เวลาที่ต้องการจองคิว : </a><input class="start_time_input" id="start_time_input" type="time" oninput="updateDuration()">
        <a>ถึง : </a><input class="end_time_input" id="end_time_input" type="time" disabled><br>
        <div id="services_container">
            <!-- Service Select Appear Here! -->
        </div><br>
        <a>ราคารวมบริการทั้งหมด : </a><input type="text" id="all-price-count" placeholder="0 บาท" disabled>
        <br>
        <button id="add_service_button" onclick="addService()">+</button>
        <br>
        
        <br><br>
        <button id="queue_button" onclick="queue()">จองคิว</button>
    </div>
        <button id="cancel_button">ยกเลิก</button>

    <script>
        <%-include('scripts/RadianFormat')%>
        <%-include('scripts/DateFormat')%>

        document.getElementById("for-alert").style.visibility = "hidden";

        document.getElementById("date_input").value = DateToDateString(new Date("<%=search_date%>"));
        function changeDate() {
            window.location.href = `/queue/${document.getElementById("date_input").value}`;
        }

        let radianList = [];
        let current_tasks_list = [];


        // Creating clock and number
        const canvasClockText = document.getElementById('clocktext');
        const contextClockText = canvasClockText.getContext('2d');
        const centerX = canvasClockText.width / 2;
        const centerY = canvasClockText.height / 2;
        const radius = 180;


        function createClockNumber() {
            const number_clock = [
                { value: degreesToRadians(0),      number: '15' },
                { value: degreesToRadians(30),     number: '16' },
                { value: degreesToRadians(60),     number: '17' },
                { value: degreesToRadians(90),     number: '18' },
                { value: degreesToRadians(120),    number: '19' },
                { value: degreesToRadians(150),    number: '20' },
                { value: degreesToRadians(180),    number: '9' },
                { value: degreesToRadians(210),    number: '10' },
                { value: degreesToRadians(240),    number: '11' },
                { value: degreesToRadians(270),    number: '12' },
                { value: degreesToRadians(300),    number: '13' },
                { value: degreesToRadians(330),    number: '14' }
            ];

            number_clock.forEach(item => {
                const textX = centerX + (radius) * Math.cos(item.value);
                const textY = centerY + (radius) * Math.sin(item.value);
                
                contextClockText.fillStyle = 'black';
                contextClockText.font = '20px Arial';
                contextClockText.fillText(item.number, textX - 10, textY + 8);
            });
        }


        function updateClockData() {
            contextClockText.clearRect(0, 0, canvasClockText.width, canvasClockText.height);
            createClockNumber();

            const timeList = [];
            radianList = [];
            current_tasks_list.forEach(item => {
                timeList.push({start: new Date(item.start_datetime), end: new Date(item.end_datetime)});
            });

            contextClockText.beginPath();
            contextClockText.moveTo(centerX, centerY);

            timeList.forEach(item => {
                radianList.push({start: degreesToRadians(180+((item.start.getHours()-9)*30)+(item.start.getMinutes()*0.5)),
                                end: degreesToRadians(180+((item.end.getHours()-9)*30)+(item.end.getMinutes()*0.5))});
            });

            drawClock();
        }

        function drawClock() {
            // Disable Queue (Clinic Closed)
            contextClockText.beginPath();
            contextClockText.moveTo(centerX, centerY);
            contextClockText.arc(centerX, centerY, radius-15, degreesToRadians(150), degreesToRadians(180));
            contextClockText.closePath();

            contextClockText.fillStyle = 'gray';
            contextClockText.fill();

            // Already Queue
            radianList.forEach(item => {
                contextClockText.beginPath();
                contextClockText.moveTo(centerX, centerY);
                contextClockText.arc(centerX, centerY, radius-15, item.start, item.end);
                contextClockText.closePath();

                contextClockText.fillStyle = 'red';
                contextClockText.fill();
            });

            // User Queue
        }
        updateClockData();

        const services_container = document.getElementById("services_container");

        const services_data = <%- JSON.stringify(services_data) %>;
        const doctors_data = <%- JSON.stringify(doctors_data) %>;
        const tasks_data = <%- JSON.stringify(tasks_data) %>;
        const subtasks_data = <%- JSON.stringify(subtasks_data) %>;
        const service_perms_data = <%- JSON.stringify(service_perms_data) %>;
        
        // services_data
        services_data.forEach(service => {
            const perms_list = service_perms_data.filter(perms => perms.service_id == service.service_id);

            service.doctor_id = [];
            service.specialty_id = [];
            perms_list.forEach(perms => {
                service.doctor_id.push(perms.doctor_id);
                service.specialty_id.push(perms.specialty_id);
            })
            
        });

        let services_data_sorted = [];

        // subtasks_data
        for (let i = 0; i < subtasks_data.length; i++) {
            let start_datetime; let end_datetime;
            if (subtasks_data[i].subtask_no != 1) {
                start_datetime = new Date(subtasks_data[i-1].end_datetime);
            } else {
                start_datetime = new Date(tasks_data.find(item => item.task_id === subtasks_data[i].task_id).start_datetime);
            }
            end_datetime = new Date(start_datetime);
            end_datetime.setMinutes(end_datetime.getMinutes() + services_data.find(item => item.service_id == subtasks_data[i].service_id).duration);
            
            subtasks_data[i].start_datetime = start_datetime;
            subtasks_data[i].end_datetime = end_datetime;
        }

        let services_count = 0;

        function services_filter(id) {
            const temDiv = document.getElementById(id);
            const tem_services_datalist = temDiv.querySelector("#services_data");

            tem_services_datalist.innerHTML = "";
            services_data_sorted.forEach(function(item) {
                let temOption = document.createElement("option");
                temOption.dataset.id = item.service_id;
                temOption.dataset.duration = item.duration;
                temOption.dataset.price = item.price;
                temOption.innerHTML = item.price.toLocaleString() + " บาท";
                temOption.value = item.name;
                
                tem_services_datalist.appendChild(temOption);
            });
        }

        function updateTasksAndServices() {
            const doctor_selected = document.getElementById("doctor_selected").value;
            const doctor_selectedOption = [...document.getElementById("doctors_data").options]
                .find(option => option.value === doctor_selected);
            
            current_tasks_list = [];
            services_data_sorted = [];

            if (doctor_selectedOption) {
                const selectedDoctorId = doctor_selectedOption.dataset.id;
                const selectedSpecialtyId = doctor_selectedOption.dataset.specialty_id;
                subtasks_data.forEach(item => {
                    if (item.doctor_id == selectedDoctorId) {
                        current_tasks_list.push(item);
                    }
                });
                services_data.forEach(item => {
                    if (item.specialty_id == selectedSpecialtyId || item.doctor_id == selectedDoctorId) {
                        services_data_sorted.push(item);
                    }
                });
            }

            const divAll = services_container.children;
            
            Array.from(divAll).forEach(function(item) {
                services_filter(item.id);
            });
        }

        function doctors_filter() {
            const doctors_datalist = document.getElementById("doctors_data");

            doctors_datalist.innerHTML = "";
            doctors_data.forEach(function(item) {
                let temOption = document.createElement("option");
                temOption.dataset.id = item.doctor_id;
                temOption.dataset.specialty_id = item.specialty_id;
                temOption.innerHTML = item.specialty;
                temOption.value = item.prename + " " + item.firstname + " " + item.lastname;
                
                doctors_datalist.appendChild(temOption);
            });
        }
        doctors_filter();

        function addService() {
            services_count += 1;
            const temDiv = document.createElement("div");
            temDiv.innerHTML = `<input list="services_data" class="service_selected" type="text" placeholder="ชื่อบริการ..." onchange="services_filter(${services_count});updateDuration();updateAllPrice();">\
                                <datalist id="services_data"></datalist>\
                                <a>ระยะเวลาบริการ : </a><input class="duration_input" type="number" placeholder="ไม่พบข้อมูลบริการ" disabled>\
                                <a>ราคาบริการ : </a><input class="price_input" type="number" placeholder="ไม่พบข้อมูลบริการ" disabled>` +
                                (services_count != 1 ? `<button onclick="removeService(${services_count})">-</button>` : ``);
            temDiv.id = services_count;

            services_container.appendChild(temDiv);
            
            services_filter(services_count);

            document.getElementById(services_count).querySelector(".service_selected").addEventListener("input", function() {
                const temDiv = document.getElementById(services_count);

                const service_selected = temDiv.querySelector(".service_selected").value;
                const service_selectedOption = [...temDiv.querySelector("#services_data").options]
                    .find(option => option.value === service_selected);
                
                if (service_selectedOption) {
                    const temPrice = service_selectedOption.dataset.price.toLocaleString() + " บาท";
                    const temDuration = service_selectedOption.dataset.duration;
                    const temDurationString = ((temDuration >= 60) ? ( Math.floor( temDuration / 60) ) + " ชั่วโมง " : "") + 
                                        ( Math.floor( temDuration % 60) ) + " นาที";
                    temDiv.querySelector(".duration_input").placeholder = temDurationString;
                    temDiv.querySelector(".price_input").placeholder = temPrice;
                } else {
                    temDiv.querySelector(".duration_input").placeholder = "ไม่พบข้อมูลบริการ";
                    temDiv.querySelector(".price_input").placeholder = "ไม่พบข้อมูลบริการ";
                }
            });
        }
        addService();

        function removeService(id) {
            services_count -= 1;
            const temDiv = document.getElementById(id);
            services_container.removeChild(temDiv);
        }

        function findQueueCount() {
            document.getElementById("queue_count").innerHTML = "จำนวนคิวและนัดในวันนี้: " + <%= tasks_data.length %>;
        }
        findQueueCount();

        function queue() {
            const subtasksList = [];
            const divAll = services_container.children;
            
            Array.from(divAll).forEach(function(item) {
                const service_selected = item.querySelector(".service_selected").value;
                const service_selectedOption = [...item.querySelector("#services_data").options]
                    .find(option => option.value === service_selected);
                
                if (service_selectedOption) {
                    subtasksList.push(service_selectedOption.dataset.id);
                }
            })

            const queueData = {
                date: document.getElementById("date_input").value,
                doctor_id: document.getElementById("doctor_selected").value,
                start_time: document.getElementById("start_time_input").value,
                subtasks: subtasksList
            };
            console.log(JSON.stringify(queueData))

            fetch('/queue-insert', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(queueData)
            })
            .then(response => response.text())
            .then(data => {
                document.getElementById("for-alert").innerHTML = data;
                document.getElementById("for-alert").style.visibility = "visible";
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        }

        // Update Duration
        function updateDuration() {
            let destTime = new Date(`<%-JSON.stringify(search_date)%>` + document.getElementById("start_time_input").value + ":00");

            if (isNaN(destTime.getTime())) return; 
            const divAll = services_container.children;
            Array.from(divAll).forEach(function(item) {
                if (item.querySelector(".duration_input").placeholder.split(" ")[1] === "นาที") {
                    destTime.setMinutes(destTime.getMinutes() + parseInt(item.querySelector(".duration_input").placeholder.split(" ")[0]));
                } else {
                    document.getElementById("end_time_input").value = "";
                }
            });

            document.getElementById("end_time_input").value = DateToTimeString(destTime);
            
        }

        // Update All Price Count
        function updateAllPrice() {
            let allprice = 0;

            const divAll = services_container.children;
            Array.from(divAll).forEach(function(item) {
                if (item.querySelector(".price_input").placeholder.split(" ")[1] === "บาท") {
                    allprice += parseInt(item.querySelector(".price_input").placeholder.split(" ")[0]);
                }
            });
            document.getElementById("all-price-count").placeholder = allprice + " บาท";
        }

        // Check Can Queue
        if (new Date("<%=search_date%>") < new Date(DateToDateString(getCurrentTHDatetime()))) {
            document.getElementById("queue-below-container").innerHTML = "ไม่สามารถจองคิวในวันที่ผ่านมาแล้วได้";
        }
    </script>
</body>

</html>